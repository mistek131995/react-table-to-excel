{"id":"../node_modules/@fast-csv/parse/build/src/parser/RowParser.js","dependencies":[{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\RowParser.js.map","includedInParent":true,"mtime":1658855089901},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\package.json","includedInParent":true,"mtime":1658855091654},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\package.json","includedInParent":true,"mtime":1658855089792},{"name":"./column","loc":{"line":4,"column":25,"index":130},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\RowParser.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\column\\index.js"},{"name":"./Token","loc":{"line":5,"column":24,"index":167},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\RowParser.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Token.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RowParser = void 0;\nconst column_1 = require(\"./column\");\nconst Token_1 = require(\"./Token\");\nconst EMPTY_STRING = '';\nclass RowParser {\n    constructor(parserOptions) {\n        this.parserOptions = parserOptions;\n        this.columnParser = new column_1.ColumnParser(parserOptions);\n    }\n    static isEmptyRow(row) {\n        return row.join(EMPTY_STRING).replace(/\\s+/g, EMPTY_STRING) === EMPTY_STRING;\n    }\n    parse(scanner) {\n        const { parserOptions } = this;\n        const { hasMoreData } = scanner;\n        const currentScanner = scanner;\n        const columns = [];\n        let currentToken = this.getStartToken(currentScanner, columns);\n        while (currentToken) {\n            if (Token_1.Token.isTokenRowDelimiter(currentToken)) {\n                currentScanner.advancePastToken(currentToken);\n                // if ends with CR and there is more data, keep unparsed due to possible\n                // coming LF in CRLF\n                if (!currentScanner.hasMoreCharacters &&\n                    Token_1.Token.isTokenCarriageReturn(currentToken, parserOptions) &&\n                    hasMoreData) {\n                    return null;\n                }\n                currentScanner.truncateToCursor();\n                return columns;\n            }\n            if (!this.shouldSkipColumnParse(currentScanner, currentToken, columns)) {\n                const item = this.columnParser.parse(currentScanner);\n                if (item === null) {\n                    return null;\n                }\n                columns.push(item);\n            }\n            currentToken = currentScanner.nextNonSpaceToken;\n        }\n        if (!hasMoreData) {\n            currentScanner.truncateToCursor();\n            return columns;\n        }\n        return null;\n    }\n    getStartToken(scanner, columns) {\n        const currentToken = scanner.nextNonSpaceToken;\n        if (currentToken !== null && Token_1.Token.isTokenDelimiter(currentToken, this.parserOptions)) {\n            columns.push('');\n            return scanner.nextNonSpaceToken;\n        }\n        return currentToken;\n    }\n    shouldSkipColumnParse(scanner, currentToken, columns) {\n        const { parserOptions } = this;\n        if (Token_1.Token.isTokenDelimiter(currentToken, parserOptions)) {\n            scanner.advancePastToken(currentToken);\n            // if the delimiter is at the end of a line\n            const nextToken = scanner.nextCharacterToken;\n            if (!scanner.hasMoreCharacters || (nextToken !== null && Token_1.Token.isTokenRowDelimiter(nextToken))) {\n                columns.push('');\n                return true;\n            }\n            if (nextToken !== null && Token_1.Token.isTokenDelimiter(nextToken, parserOptions)) {\n                columns.push('');\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.RowParser = RowParser;\n"},"sourceMaps":{"js":{"version":3,"file":"RowParser.js","sourceRoot":"","sources":["../../../src/parser/RowParser.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"2237fe4e5956cad9df99031e86714734","cacheData":{"env":{}}}