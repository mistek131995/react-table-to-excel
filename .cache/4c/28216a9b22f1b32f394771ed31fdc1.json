{"id":"../node_modules/@fast-csv/parse/build/src/parser/Parser.js","dependencies":[{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Parser.js.map","includedInParent":true,"mtime":1658855089878},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\package.json","includedInParent":true,"mtime":1658855091654},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\package.json","includedInParent":true,"mtime":1658855089792},{"name":"./Scanner","loc":{"line":4,"column":26,"index":128},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Parser.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Scanner.js"},{"name":"./RowParser","loc":{"line":5,"column":28,"index":170},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Parser.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\RowParser.js"},{"name":"./Token","loc":{"line":6,"column":24,"index":210},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Parser.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\Token.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Parser = void 0;\nconst Scanner_1 = require(\"./Scanner\");\nconst RowParser_1 = require(\"./RowParser\");\nconst Token_1 = require(\"./Token\");\nclass Parser {\n    constructor(parserOptions) {\n        this.parserOptions = parserOptions;\n        this.rowParser = new RowParser_1.RowParser(this.parserOptions);\n    }\n    static removeBOM(line) {\n        // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string\n        // conversion translates it to FEFF (UTF-16 BOM)\n        if (line && line.charCodeAt(0) === 0xfeff) {\n            return line.slice(1);\n        }\n        return line;\n    }\n    parse(line, hasMoreData) {\n        const scanner = new Scanner_1.Scanner({\n            line: Parser.removeBOM(line),\n            parserOptions: this.parserOptions,\n            hasMoreData,\n        });\n        if (this.parserOptions.supportsComments) {\n            return this.parseWithComments(scanner);\n        }\n        return this.parseWithoutComments(scanner);\n    }\n    parseWithoutComments(scanner) {\n        const rows = [];\n        let shouldContinue = true;\n        while (shouldContinue) {\n            shouldContinue = this.parseRow(scanner, rows);\n        }\n        return { line: scanner.line, rows };\n    }\n    parseWithComments(scanner) {\n        const { parserOptions } = this;\n        const rows = [];\n        for (let nextToken = scanner.nextCharacterToken; nextToken !== null; nextToken = scanner.nextCharacterToken) {\n            if (Token_1.Token.isTokenComment(nextToken, parserOptions)) {\n                const cursor = scanner.advancePastLine();\n                if (cursor === null) {\n                    return { line: scanner.lineFromCursor, rows };\n                }\n                if (!scanner.hasMoreCharacters) {\n                    return { line: scanner.lineFromCursor, rows };\n                }\n                scanner.truncateToCursor();\n            }\n            else if (!this.parseRow(scanner, rows)) {\n                break;\n            }\n        }\n        return { line: scanner.line, rows };\n    }\n    parseRow(scanner, rows) {\n        const nextToken = scanner.nextNonSpaceToken;\n        if (!nextToken) {\n            return false;\n        }\n        const row = this.rowParser.parse(scanner);\n        if (row === null) {\n            return false;\n        }\n        if (this.parserOptions.ignoreEmpty && RowParser_1.RowParser.isEmptyRow(row)) {\n            return true;\n        }\n        rows.push(row);\n        return true;\n    }\n}\nexports.Parser = Parser;\n"},"sourceMaps":{"js":{"version":3,"file":"Parser.js","sourceRoot":"","sources":["../../../src/parser/Parser.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"0d495a15265da31495ad12be3fbc747a","cacheData":{"env":{}}}