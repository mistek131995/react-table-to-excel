{"id":"../node_modules/@fast-csv/parse/build/src/CsvParserStream.js","dependencies":[{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\CsvParserStream.js.map","includedInParent":true,"mtime":1658855089831},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\package.json","includedInParent":true,"mtime":1658855091654},{"name":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\package.json","includedInParent":true,"mtime":1658855089792},{"name":"string_decoder","loc":{"line":4,"column":33,"index":144},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\CsvParserStream.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\string_decoder\\lib\\string_decoder.js"},{"name":"stream","loc":{"line":5,"column":25,"index":188},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\CsvParserStream.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\stream-browserify\\index.js"},{"name":"./transforms","loc":{"line":6,"column":29,"index":228},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\CsvParserStream.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\transforms\\index.js"},{"name":"./parser","loc":{"line":7,"column":25,"index":270},"parent":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\CsvParserStream.js","resolved":"C:\\Users\\omega\\OneDrive\\Рабочий стол\\ReactApp\\react-table-to-excel\\node_modules\\@fast-csv\\parse\\build\\src\\parser\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CsvParserStream = void 0;\nconst string_decoder_1 = require(\"string_decoder\");\nconst stream_1 = require(\"stream\");\nconst transforms_1 = require(\"./transforms\");\nconst parser_1 = require(\"./parser\");\nclass CsvParserStream extends stream_1.Transform {\n    constructor(parserOptions) {\n        super({ objectMode: parserOptions.objectMode });\n        this.lines = '';\n        this.rowCount = 0;\n        this.parsedRowCount = 0;\n        this.parsedLineCount = 0;\n        this.endEmitted = false;\n        this.headersEmitted = false;\n        this.parserOptions = parserOptions;\n        this.parser = new parser_1.Parser(parserOptions);\n        this.headerTransformer = new transforms_1.HeaderTransformer(parserOptions);\n        this.decoder = new string_decoder_1.StringDecoder(parserOptions.encoding);\n        this.rowTransformerValidator = new transforms_1.RowTransformerValidator();\n    }\n    get hasHitRowLimit() {\n        return this.parserOptions.limitRows && this.rowCount >= this.parserOptions.maxRows;\n    }\n    get shouldEmitRows() {\n        return this.parsedRowCount > this.parserOptions.skipRows;\n    }\n    get shouldSkipLine() {\n        return this.parsedLineCount <= this.parserOptions.skipLines;\n    }\n    transform(transformFunction) {\n        this.rowTransformerValidator.rowTransform = transformFunction;\n        return this;\n    }\n    validate(validateFunction) {\n        this.rowTransformerValidator.rowValidator = validateFunction;\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    emit(event, ...rest) {\n        if (event === 'end') {\n            if (!this.endEmitted) {\n                this.endEmitted = true;\n                super.emit('end', this.rowCount);\n            }\n            return false;\n        }\n        return super.emit(event, ...rest);\n    }\n    _transform(data, encoding, done) {\n        // if we have hit our maxRows parsing limit then skip parsing\n        if (this.hasHitRowLimit) {\n            return done();\n        }\n        const wrappedCallback = CsvParserStream.wrapDoneCallback(done);\n        try {\n            const { lines } = this;\n            const newLine = lines + this.decoder.write(data);\n            const rows = this.parse(newLine, true);\n            return this.processRows(rows, wrappedCallback);\n        }\n        catch (e) {\n            return wrappedCallback(e);\n        }\n    }\n    _flush(done) {\n        const wrappedCallback = CsvParserStream.wrapDoneCallback(done);\n        // if we have hit our maxRows parsing limit then skip parsing\n        if (this.hasHitRowLimit) {\n            return wrappedCallback();\n        }\n        try {\n            const newLine = this.lines + this.decoder.end();\n            const rows = this.parse(newLine, false);\n            return this.processRows(rows, wrappedCallback);\n        }\n        catch (e) {\n            return wrappedCallback(e);\n        }\n    }\n    parse(data, hasMoreData) {\n        if (!data) {\n            return [];\n        }\n        const { line, rows } = this.parser.parse(data, hasMoreData);\n        this.lines = line;\n        return rows;\n    }\n    processRows(rows, cb) {\n        const rowsLength = rows.length;\n        const iterate = (i) => {\n            const callNext = (err) => {\n                if (err) {\n                    return cb(err);\n                }\n                if (i % 100 === 0) {\n                    // incase the transform are sync insert a next tick to prevent stack overflow\n                    setImmediate(() => iterate(i + 1));\n                    return undefined;\n                }\n                return iterate(i + 1);\n            };\n            this.checkAndEmitHeaders();\n            // if we have emitted all rows or we have hit the maxRows limit option\n            // then end\n            if (i >= rowsLength || this.hasHitRowLimit) {\n                return cb();\n            }\n            this.parsedLineCount += 1;\n            if (this.shouldSkipLine) {\n                return callNext();\n            }\n            const row = rows[i];\n            this.rowCount += 1;\n            this.parsedRowCount += 1;\n            const nextRowCount = this.rowCount;\n            return this.transformRow(row, (err, transformResult) => {\n                if (err) {\n                    this.rowCount -= 1;\n                    return callNext(err);\n                }\n                if (!transformResult) {\n                    return callNext(new Error('expected transform result'));\n                }\n                if (!transformResult.isValid) {\n                    this.emit('data-invalid', transformResult.row, nextRowCount, transformResult.reason);\n                }\n                else if (transformResult.row) {\n                    return this.pushRow(transformResult.row, callNext);\n                }\n                return callNext();\n            });\n        };\n        iterate(0);\n    }\n    transformRow(parsedRow, cb) {\n        try {\n            this.headerTransformer.transform(parsedRow, (err, withHeaders) => {\n                if (err) {\n                    return cb(err);\n                }\n                if (!withHeaders) {\n                    return cb(new Error('Expected result from header transform'));\n                }\n                if (!withHeaders.isValid) {\n                    if (this.shouldEmitRows) {\n                        return cb(null, { isValid: false, row: parsedRow });\n                    }\n                    // skipped because of skipRows option remove from total row count\n                    return this.skipRow(cb);\n                }\n                if (withHeaders.row) {\n                    if (this.shouldEmitRows) {\n                        return this.rowTransformerValidator.transformAndValidate(withHeaders.row, cb);\n                    }\n                    // skipped because of skipRows option remove from total row count\n                    return this.skipRow(cb);\n                }\n                // this is a header row dont include in the rowCount or parsedRowCount\n                this.rowCount -= 1;\n                this.parsedRowCount -= 1;\n                return cb(null, { row: null, isValid: true });\n            });\n        }\n        catch (e) {\n            cb(e);\n        }\n    }\n    checkAndEmitHeaders() {\n        if (!this.headersEmitted && this.headerTransformer.headers) {\n            this.headersEmitted = true;\n            this.emit('headers', this.headerTransformer.headers);\n        }\n    }\n    skipRow(cb) {\n        // skipped because of skipRows option remove from total row count\n        this.rowCount -= 1;\n        return cb(null, { row: null, isValid: true });\n    }\n    pushRow(row, cb) {\n        try {\n            if (!this.parserOptions.objectMode) {\n                this.push(JSON.stringify(row));\n            }\n            else {\n                this.push(row);\n            }\n            cb();\n        }\n        catch (e) {\n            cb(e);\n        }\n    }\n    static wrapDoneCallback(done) {\n        let errorCalled = false;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (err, ...args) => {\n            if (err) {\n                if (errorCalled) {\n                    throw err;\n                }\n                errorCalled = true;\n                done(err);\n                return;\n            }\n            done(...args);\n        };\n    }\n}\nexports.CsvParserStream = CsvParserStream;\n"},"sourceMaps":{"js":{"version":3,"file":"CsvParserStream.js","sourceRoot":"","sources":["../../src/CsvParserStream.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"81b1214b874dbaf40f1af83e3f798b11","cacheData":{"env":{}}}